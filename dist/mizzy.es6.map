{"version":3,"names":[],"mappings":"","sources":["mizzy.es6.js"],"sourcesContent":["class Events {\r\n\tconstructor() {\r\n\t\tthis.listeners = {};\r\n\t}\r\n\r\n\t// take this event name, and run this handler when it occurs\r\n\ton(event, handler) {\r\n\t\tif (this.listeners[event] === undefined) {\r\n\t\t\tthis.listeners[event] = [handler];\r\n\t\t} else {\r\n\t\t\tthis.listeners[event].push(handler);\r\n\t\t}\r\n\t\treturn handler;\r\n\t};\r\n\r\n\t// unbind this event and handler\r\n\toff(event) {\r\n\t\tif (this.listeners[event]) {\r\n\t\t\tfor (let i = this.listeners[event].length - 1; i >= 0; i--) {\r\n\t\t\t\tif (this.listeners[event].length === 1) {\r\n\t\t\t\t\tdelete this.listeners[event];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.listeners[event].splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\n\nconst GLOBAL_TUNE = 440;\r\nconst MIDI_14BIT_MAX_VALUE = 16384;\r\nconst MIDI_MAX_VALUE = 127;\r\n\r\nclass Convert {\r\n\r\n\tstatic MIDINoteToFrequency(midinote, tune = GLOBAL_TUNE) {\r\n\t\treturn tune * Math.pow(2, (midinote - 69) / 12); //\r\n\t}\r\n\r\n\tstatic PitchWheelToPolar (raw) {\r\n\t\treturn -((MIDI_14BIT_MAX_VALUE * 0.5) - raw);\r\n\t}\r\n\r\n\tstatic PitchWheelToPolarRatio (raw) {\r\n\t\treturn Convert.PitchWheelToPolar(raw) / (MIDI_14BIT_MAX_VALUE * 0.5)\r\n\t}\r\n\r\n\tstatic MidiValueToRatio (value) {\r\n\t\treturn value / MIDI_MAX_VALUE;\r\n\t}\r\n\r\n\tstatic MidiValueToPolarRatio (value) {\r\n\t\tlet halfmax = (MIDI_MAX_VALUE * 0.5);\r\n\t\treturn -(halfmax - value) / halfmax;\r\n\t}\r\n\r\n}\n\nconst MIDI_NOTE_ON = 0x90;\r\nconst MIDI_NOTE_OFF = 0x80;\r\nconst MIDI_AFTERTOUCH = 0xA0;\r\nconst MIDI_CONTROL_CHANGE = 0xB0;\r\nconst MIDI_PROGRAM_CHANGE = 0xC0;\r\nconst MIDI_CHANNEL_PRESSURE = 0xD0;\r\nconst MIDI_PITCHBEND = 0xE0;\r\n\r\nconst MIDI_MESSAGE_EVENT = \"midimessage\";\r\n\r\nconst NOTE_ON_EVENT = \"NoteOn\";\r\nconst NOTE_OFF_EVENT = \"NoteOff\";\r\nconst PITCHWHEEL_EVENT = \"PitchWheel\";\r\nconst CONTROLLER_EVENT = \"Controller\";\r\nconst PROGRAM_CHANGE_EVENT = \"ProgramChange\";\r\nconst AFTERTOUCH_EVENT = \"Aftertouch\";\r\n\r\nconst KEYBOARD_EVENT_KEY_DOWN = \"keydown\";\r\nconst KEYBOARD_EVENT_KEY_UP = \"keyup\";\r\n\r\nconst ENHARMONIC_KEYS = [\"C\", \"G\", \"D\", \"A\", \"E\", \"B\", \"Cb\", \"F#\", \"Gb\", \"C#\", \"Db\", \"Ab\", \"Eb\", \"Bb\", \"F\"];\r\n\r\nconst MIDI_NOTE_MAP = {\r\n\t\"C\": [0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120],\r\n\t\"D\": [2, 14, 26, 38, 50, 62, 74, 86, 98, 110, 122],\r\n\t\"E\": [4, 16, 28, 40, 52, 64, 76, 88, 100, 112, 124],\r\n\t\"F\": [5, 17, 29, 41, 53, 65, 77, 89, 101, 113, 125],\r\n\t\"G\": [7, 19, 31, 43, 55, 67, 79, 91, 103, 115, 127],\r\n\t\"A\": [9, 21, 33, 45, 57, 69, 81, 93, 105, 117],\r\n\t\"B\": [11, 23, 35, 47, 59, 71, 83, 95, 107, 119],\r\n\t\"C#\": [1, 13, 25, 37, 49, 61, 73, 85, 97, 109, 121],\r\n\t\"D#\": [3, 15, 27, 39, 51, 63, 75, 87, 99, 111, 123],\r\n\t\"E#\": [5, 17, 29, 41, 53, 65, 77, 89, 101, 113, 125],\r\n\t\"F#\": [6, 18, 30, 42, 54, 66, 78, 90, 102, 114, 126],\r\n\t\"G#\": [8, 20, 32, 44, 56, 68, 80, 92, 104, 116],\r\n\t\"A#\": [10, 22, 34, 46, 58, 70, 82, 94, 106, 118],\r\n\t\"B#\": [0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120],\r\n\t\"Db\": [1, 13, 25, 37, 49, 61, 73, 85, 97, 109, 121],\r\n\t\"Eb\": [3, 15, 27, 39, 51, 63, 75, 87, 99, 111, 123],\r\n\t\"Fb\": [4, 16, 28, 40, 52, 64, 76, 88, 100, 112, 124],\r\n\t\"Gb\": [6, 18, 30, 42, 54, 66, 78, 90, 102, 114, 126],\r\n\t\"Ab\": [8, 20, 32, 44, 56, 68, 80, 92, 104, 116],\r\n\t\"Bb\": [10, 22, 34, 46, 58, 70, 82, 94, 106, 118],\r\n\t\"Cb\": [11, 23, 35, 47, 59, 71, 83, 95, 107, 119]\r\n};\r\n\r\n\r\n\r\nconst KEY_NOTE_ARRAYS = {\r\n\t\"C\": [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"],\r\n\t\"G\": [\"G\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F#\"],\r\n\t\"D\": [\"D\", \"E\", \"F#\", \"G\", \"A\", \"B\", \"C#\"],\r\n\t\"A\": [\"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G#\"],\r\n\t\"E\": [\"E\", \"F#\", \"G#\", \"A\", \"B\", \"C#\", \"D#\"],\r\n\t\"B\": [\"B\", \"C#\", \"D#\", \"E\", \"F#\", \"G#\", \"A#\"],\r\n\t\"F#\": [\"F#\", \"G#\", \"A#\", \"B\", \"C#\", \"D#\", \"E#\"],\r\n\t\"C#\": [\"C#\", \"D#\", \"E#\", \"F#\", \"G#\", \"A#\", \"B#\"],\r\n\t\"Cb\": [\"Cb\", \"Db\", \"Eb\", \"Fb\", \"Gb\", \"Ab\", \"Bb\"],\r\n\t\"Gb\": [\"Gb\", \"Ab\", \"Bb\", \"Cb\", \"Db\", \"Eb\", \"F\"],\r\n\t\"Db\": [\"Db\", \"Eb\", \"F\", \"Gb\", \"Ab\", \"Bb\", \"C\"],\r\n\t\"Ab\": [\"Ab\", \"Bb\", \"C\", \"Db\", \"Eb\", \"F\", \"G\"],\r\n\t\"Eb\": [\"Eb\", \"F\", \"G\", \"Ab\", \"Bb\", \"C\", \"D\"],\r\n\t\"Bb\": [\"Bb\", \"C\", \"D\", \"Eb\", \"F\", \"G\", \"A\"],\r\n\t\"F\": [\"F\", \"G\", \"A\", \"Bb\", \"C\", \"D\", \"E\"]\r\n};\n\nclass DataProcess {\r\n\t// add all of our extra data to the MIDI message event.\r\n\tstatic NoteEvent(message, key = ENHARMONIC_KEYS[0], transpose = 0) {\r\n\t\tconst value = message.data[1] + transpose;\r\n\t\tconst notes = this.getNoteNames(value);\r\n\t\tconst data = {\r\n\t\t\t\"enharmonics\": notes,\r\n\t\t\t\"note\": DataProcess.findNoteInKey(notes, key),\r\n\t\t\t\"inKey\": DataProcess.isNoteInKey(notes, key),\r\n\t\t\t\"value\": value,\r\n\t\t\t\"velocity\": message.data[2],\r\n\t\t\t\"frequency\": Convert.MIDINoteToFrequency(value)\r\n\t\t};\r\n\t\treturn Object.assign(message, data);\r\n\t};\r\n\r\n\t// add all of our extra data to the MIDI message event.\r\n\tstatic CCEvent(message, ccNameOverride) {\r\n\t\treturn Object.assign(message, {\r\n\t\t\t\"cc\": ccNameOverride || message.data[1],\r\n\t\t\t\"value\": message.data[2],\r\n\t\t\t\"ratio\": Convert.MidiValueToRatio(message.data[2]),\r\n\t\t\t\"polarRatio\":Convert.MidiValueToPolarRatio(message.data[2]),\r\n\t\t});\r\n\t}\r\n\r\n\t// add all of our extra data to the MIDI message event.\r\n\tstatic MidiControlEvent(message, controlName) {\r\n\t\treturn Object.assign(message, {\r\n\t\t\t\"cc\": controlName,\r\n\t\t\t\"value\": message.data[1],\r\n\t\t\t\"ratio\": Convert.MidiValueToRatio(message.data[2]),\r\n\t\t});\r\n\t}\r\n\r\n\t// add all of our extra data to the MIDI message event.\r\n\tstatic PitchWheelEvent(message) {\r\n\t\tconst raw = message.data[1] | (message.data[2] << 7);\r\n\t\treturn Object.assign(message, {\r\n\t\t\t\"cc\": \"pitchwheel\",\r\n\t\t\t\"value\": raw,\r\n\t\t\t\"polar\": Convert.PitchWheelToPolar(raw),\r\n\t\t\t\"polarRatio\": Convert.PitchWheelToPolarRatio(raw),\r\n\t\t});\r\n\t}\r\n\r\n\t// process the midi message. Go through each type and add processed data\r\n\t// when done, check for any bound events and run them.\r\n\r\n\t// get a list of notes that match this noteNumber\r\n\tstatic getNoteNames(noteNumber) {\r\n\t\tlet noteNames = []; // create a list for the notes\r\n\t\tfor (var note in MIDI_NOTE_MAP) {\r\n\t\t\t// loop through the note table and push notes that match.\r\n\t\t\tMIDI_NOTE_MAP[note].forEach(keynumber => {\r\n\t\t\t\t\tif (noteNumber === keynumber) {\r\n\t\t\t\t\t\tnoteNames.push(note);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn noteNames;\r\n\t};\r\n\r\n\t// find the first note that is in the current key\r\n\tstatic findNoteInKey(notes, key) {\r\n\t\t// loop through the note list\r\n\t\tfor (let i = 0; i < notes.length; i++) {\r\n\t\t\tvar note = notes[i];\r\n\t\t\tif (DataProcess.matchNoteInKey(note, key)) {\r\n\t\t\t\treturn note;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn notes[0];\r\n\t};\r\n\r\n\t// is this note in key\r\n\tstatic isNoteInKey(notes, key) {\r\n\t\tfor (let n = 0; n < notes.length; n++) {\r\n\t\t\tconst note = notes[n];\r\n\t\t\tif (this.matchNoteInKey(note, key)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic matchNoteInKey(note, key) {\r\n\t\tfor (let i = 0; i < KEY_NOTE_ARRAYS[key].length; i++) {\r\n\t\t\tconst keynote = KEY_NOTE_ARRAYS[key][i];\r\n\t\t\tif (note === keynote) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\n\nclass Generate {\r\n\r\n\tstatic NoteOn(noteNumber, velocity) {\r\n\t\treturn new Uint8Array([MIDI_NOTE_ON, noteNumber, velocity]);\r\n\t}\r\n\r\n\tstatic NoteOff(noteNumber, velocity) {\r\n\t\treturn new Uint8Array([MIDI_NOTE_OFF, noteNumber, velocity]);\r\n\t}\r\n\r\n\tstatic AfterTouch(noteNumber, value) {\r\n\t\treturn new Uint8Array([MIDI_AFTERTOUCH, noteNumber, value]);\r\n\t}\r\n\r\n\tstatic CC(controller, value) {\r\n\t\treturn new Uint8Array([MIDI_CONTROL_CHANGE, controller, value]);\r\n\t}\r\n\r\n\tstatic ProgramChange(instrument) {\r\n\t\treturn new Uint8Array([MIDI_PROGRAM_CHANGE, instrument]);\r\n\t}\r\n\r\n\tstatic ChannelPressure(pressure) {\r\n\t\treturn new Uint8Array([MIDI_CHANNEL_PRESSURE, pressure]);\r\n\t}\r\n\r\n\tstatic PitchBend(value) {\r\n\t\t// @todo http://stackoverflow.com/questions/30911185/javascript-reading-3-bytes-buffer-as-an-integer\r\n\t\tvar msb = 1,\r\n\t\t\tlsb = 1;\r\n\t\treturn new Uint8Array([MIDI_PITCHBEND, msb, lsb]);\r\n\t}\r\n\r\n\tstatic NoteEvent(messageType, value) {\r\n\t\tlet data = null;\r\n\t\tswitch (messageType) {\r\n\t\t\tcase NOTE_ON_EVENT:\r\n\t\t\t\tdata = Generate.NoteOn(value, 127);\r\n\t\t\t\tbreak;\r\n\t\t\tcase NOTE_OFF_EVENT:\r\n\t\t\t\tdata = Generate.NoteOff(value, 127);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tconst newMessage = new MIDIMessageEvent(MIDI_MESSAGE_EVENT, {\"data\": data}) || {\"data\": data};\r\n\t\treturn DataProcess.NoteEvent(newMessage, this.key);\r\n\t}\r\n\r\n\tstatic CCEvent(cc, value) {\r\n\t\tlet data = Generate.CC(cc, value);\r\n\t\tconst newMessage = new MIDIMessageEvent(MIDI_MESSAGE_EVENT, {\"data\": data});\r\n\t\treturn DataProcess.CCEvent(newMessage);\r\n\t}\r\n\r\n\tstatic PitchBendEvent(value) {\r\n\t\tlet data = Generate.PitchBend(value);\r\n\t\tconst newMessage = new MIDIMessageEvent(MIDI_MESSAGE_EVENT, {\"data\": data});\r\n\t\treturn DataProcess.CCEvent(newMessage);\r\n\t}\r\n}\n\nclass MIDIEvents extends Events {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.keysPressed = [];\r\n\t\tthis.keyboadKeyPressed = [];\r\n\t}\r\n\r\n\tonMIDIMessage(message, key = ENHARMONIC_KEYS[0]) {\r\n\t\tlet eventName = null, data = null;\r\n\t\tswitch (message.data[0]) {\r\n\t\t\tcase 128:\r\n\t\t\t\teventName = NOTE_OFF_EVENT;\r\n\t\t\t\tdelete this.keysPressed[message.data[1]];\r\n\t\t\t\tdata = DataProcess.NoteEvent(message, key);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 144:\r\n\t\t\t\t// handle 0 velocity as a note off event\r\n\t\t\t\tif (message.data[2] > 0) {\r\n\t\t\t\t\teventName = NOTE_ON_EVENT;\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventName = NOTE_OFF_EVENT;\r\n\t\t\t\t}\r\n\t\t\t\tdata = DataProcess.NoteEvent(message, key);\r\n\t\t\t\tif (eventName == NOTE_ON_EVENT) {\r\n\t\t\t\t\tthis.keysPressed[message.data[1]] = data;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdelete this.keysPressed[message.data[1]];\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 176:\r\n\t\t\t\teventName = CONTROLLER_EVENT;\r\n\t\t\t\tdata = DataProcess.CCEvent(message);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 224:\r\n\t\t\t\teventName = PITCHWHEEL_EVENT;\r\n\t\t\t\tdata = DataProcess.PitchWheelEvent(message);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 208:\r\n\t\t\t\teventName = AFTERTOUCH_EVENT;\r\n\t\t\t\tdata = DataProcess.MidiControlEvent(message, eventName);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 192:\r\n\t\t\t\teventName = PROGRAM_CHANGE_EVENT;\r\n\t\t\t\tdata = DataProcess.MidiControlEvent(message, eventName);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t// if there is no event name, then we don't support that event yet so do nothing.\r\n\t\tif (eventName !== null) {\r\n\t\t\tthis.executeEventHandlers(eventName, data);\r\n\t\t}\r\n\t};\r\n\r\n\t// loop through all the bound events and execute with the newly processed data.\r\n\texecuteEventHandlers(event, data) {\r\n\t\tif (this.listeners[event]) {\r\n\t\t\tfor (let i = this.listeners[event].length - 1; i >= 0; i--) {\r\n\t\t\t\tif (this.listeners[event] !== undefined) {\r\n\t\t\t\t\tif (typeof this.listeners[event][i] === \"function\" && this.listeners[event][i]) {\r\n\t\t\t\t\t\tthis.listeners[event][i](data);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow \"Event handler is not a function.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// EZ binding for Control Change data, just pass in the CC number and handler. Can only be unbound with unbindALL()\r\n\tonCC(cc, handler) {\r\n\t\tconst wrapper = data => {\r\n\t\t\tif (data.cc == cc) {\r\n\t\t\t\thandler(data);\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.on(CONTROLLER_EVENT, wrapper);\r\n\t};\r\n\r\n\t// EZ binding for key presses, bind these two handlers to key on/off. Can only be unbound with unbindALL()\r\n\tkeyToggle(handlerOn, handlerOff) {\r\n\t\tthis.on(NOTE_ON_EVENT, handlerOn);\r\n\t\tthis.on(NOTE_OFF_EVENT, handlerOff);\r\n\t};\r\n\r\n\t// EZ binding for key values. Can only be unbound with unbindALL()\r\n\tonNoteNumber(number, handler) {\r\n\t\tconst wrapper = data => {\r\n\t\t\tif (data.value == number) {\r\n\t\t\t\thandler(data);\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.on(NOTE_ON_EVENT, wrapper);\r\n\t};\r\n\r\n\t// EZ binding for key values. Can only be unbound with unbindALL()\r\n\toffNoteNumber(number, handler) {\r\n\t\tconst wrapper = data => {\r\n\t\t\tif (data.value == number) {\r\n\t\t\t\thandler(data);\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.on(NOTE_OFF_EVENT, wrapper);\r\n\t};\r\n\r\n\t// EZ binding for a range of key values, bind these two handlers to key value. Can only be unbound with unbindALL()\r\n\tkeyToggleRange(min, max, onHandler, offHandler) {\r\n\t\tthis.onRange(min, max, onHandler);\r\n\t\tthis.offRange(min, max, offHandler);\r\n\t};\r\n\r\n\tonSplit(min, max, onHandler, offHandler) {\r\n\t\tif (max > min) {\r\n\t\t\tfor (let i = min; i <= max; i++) {\r\n\t\t\t\tthis.onNoteNumber(i, onHandler);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = max; i >= min; i--) {\r\n\t\t\t\tthis.onNoteNumber(i, onHandler);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\toffSplit(min, max, onHandler, offHandler) {\r\n\t\tif (max > min) {\r\n\t\t\tfor (let i = min; i <= max; i++) {\r\n\t\t\t\tthis.offNoteNumber(i, offHandler);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = max; i >= min; i--) {\r\n\t\t\t\tthis.offNoteNumber(i, offHandler);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Removes all bound events.\r\n\tunbindAll() {\r\n\t\tthis.unBindKeyboard();\r\n\t\tfor (let event in this.listeners) {\r\n\t\t\tdelete this.listeners[event];\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tbindKeyboard() {\r\n\t\twindow.addEventListener(KEYBOARD_EVENT_KEY_DOWN, (e) => this.keyboardKeyDown(e));\r\n\t\twindow.addEventListener(KEYBOARD_EVENT_KEY_UP, (e) => this.keyboardKeyUp(e));\r\n\t};\r\n\r\n\tunBindKeyboard() {\r\n\t\twindow.removeEventListener(KEYBOARD_EVENT_KEY_DOWN, (e) => this.keyboardKeyDown(e));\r\n\t\twindow.removeEventListener(KEYBOARD_EVENT_KEY_UP, (e) => this.keyboardKeyUp(e));\r\n\t};\r\n\r\n\tkeyboardKeyDown(message) {\r\n\t\tif (this.keyboadKeyPressed[message.keyCode] != true) {\r\n\t\t\tthis.keyboadKeyPressed[message.keyCode] = true;\r\n\t\t\tlet newMessage = null;\r\n\t\t\tswitch (message.keyCode) {\r\n\t\t\t\tcase 90:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 60);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 61);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 88:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 62);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 68:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 63);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 67:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 64);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 86:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 65);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 71:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 66);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 66:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 67);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 72:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 68);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 78:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 69);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 74:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 70);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 77:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 71);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 188:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_ON_EVENT, 72);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (newMessage !== null) {\r\n\t\t\t\tthis.sendMidiMessage(newMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tkeyboardKeyUp(message) {\r\n\t\tif (this.keyboadKeyPressed[message.keyCode] == true) {\r\n\t\t\tdelete this.keyboadKeyPressed[message.keyCode];\r\n\t\t\tlet newMessage = null;\r\n\t\t\tswitch (message.keyCode) {\r\n\t\t\t\tcase 90:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 60);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 61);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 88:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 62);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 68:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 63);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 67:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 64);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 86:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 65);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 71:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 66);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 66:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 67);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 72:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 68);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 78:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 69);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 74:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 70);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 77:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 71);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 188:\r\n\t\t\t\t\tnewMessage = Generate.NoteEvent(NOTE_OFF_EVENT, 72);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (newMessage !== null) {\r\n\t\t\t\tthis.sendMidiMessage(newMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsendMidiMessage(message) {\r\n\r\n\t}\r\n\r\n}\n\nclass Mizzy extends MIDIEvents {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.keysPressed = [];\r\n\t\tthis.midiAccess = null;\r\n\t\tthis.loopback = true;\r\n\r\n\t\tthis.boundInputs = [];\r\n\t\tthis.boundOutputs = [];\r\n\r\n\t\tthis.key = ENHARMONIC_KEYS[0]; // C-Major\r\n\t\tif (!window.MIDIMessageEvent) {\r\n\t\t\twindow.MIDIMessageEvent = (name, params) => {\r\n\t\t\t\tthis.name = name;\r\n\t\t\t\treturn Object.assign(this, params);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tinitialize() {\r\n\t\tif (this.midiAccess === null) {\r\n\t\t\tif (navigator.requestMIDIAccess) {\r\n\t\t\t\treturn navigator.requestMIDIAccess({\r\n\t\t\t\t\tsysex: false\r\n\t\t\t\t}).then((e) => this.onMIDISuccess(e), (e) => this.onMIDIFailure(e));\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Your browser has no midi support\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget keys() {\r\n\t\treturn ENHARMONIC_KEYS;\r\n\t}\r\n\r\n\tsetKey(keyletter = \"C\") {\r\n\t\tthis.key = ENHARMONIC_KEYS[ENHARMONIC_KEYS.indexOf(keyletter.toUpperCase())] || \"C\";\r\n\t}\r\n\r\n\tgetMidiInputs() {\r\n\t\tif (this.midiAccess != null) {\r\n\t\t\treturn this.midiAccess.inputs.values();\r\n\t\t}\r\n\t}\r\n\r\n\tgetMidiOutputs() {\r\n\t\tif (this.midiAccess != null) {\r\n\t\t\treturn this.midiAccess.outputs.values();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tget outputDevices() {\r\n\t\tlet deviceArray = [];\r\n\t\tlet devices = this.getMidiOutputs();\r\n\t\tfor (let input = devices.next(); input && !input.done; input = devices.next()) {\r\n\t\t\tdeviceArray.push(input.value);\r\n\t\t}\r\n\t\treturn deviceArray;\r\n\t}\r\n\r\n\tget inputDevices() {\r\n\t\tlet deviceArray = [];\r\n\t\tlet devices = this.getMidiInputs();\r\n\t\tfor (let input = devices.next(); input && !input.done; input = devices.next()) {\r\n\t\t\tdeviceArray.push(input.value);\r\n\t\t}\r\n\t\treturn deviceArray;\r\n\t}\r\n\r\n\tbindToInput(input) {\r\n\t\tthis.boundInputs.push(input);\r\n\t\tinput.onmidimessage = (e) => this.onMIDIMessage(e, this.key);\r\n\t}\r\n\r\n\tunbindInput(input) {\r\n\t\tvar index = this.boundInputs.indexOf(input);\r\n\t\tthis.boundInputs.slice(1, index);\r\n\t\tinput.onmidimessage = null;\r\n\t}\r\n\r\n\tbindToAllInputs() {\r\n\t\tif (this.midiAccess != null) {\r\n\t\t\tlet inputs = this.getMidiInputs();\r\n\t\t\tfor (let input = inputs.next(); input && !input.done; input = inputs.next()) {\r\n\t\t\t\tthis.bindToInput(input.value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tunbindAllInputs() {\r\n\t\tthis.boundInputs.forEach(this.unbindInput);\r\n\t}\r\n\r\n\tbindToOutput(output) {\r\n\t\tthis.boundOutputs.push(output);\r\n\t}\r\n\r\n\tbindToAllOutputs() {\r\n\t\tif (this.midiAccess != null) {\r\n\t\t\tlet outputs = this.getMidiOutputs();\r\n\t\t\tfor (let output = outputs.next(); output && !output.done; output = outputs.next()) {\r\n\t\t\t\tthis.bindToOutput(output.value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonMIDIFailure(error) {\r\n\t\tthrow error\r\n\t}\r\n\r\n\tonMIDISuccess(midiAccessObj) {\r\n\t\tthis.midiAccess = midiAccessObj;\r\n\t}\r\n\r\n\tsendMidiMessage(message) {\r\n\t\tthis.boundOutputs.forEach((output) => {\r\n\t\t\toutput.send(message.data, message.timeStamp);\r\n\t\t});\r\n\t\tif (this.loopback) {\r\n\t\t\tthis.onMIDIMessage(message, this.key);\r\n\t\t}\r\n\t}\r\n}\r\nMizzy.Generate = Generate;\n\nexport default Mizzy;\n"],"file":"mizzy.es6.js"}